// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: box/search.proto

package eboxpb

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SearchResultType int32

const (
	SearchResultType_SearchResultTypeNone SearchResultType = 0
	//群组
	SearchResultType_SearchResultTypeConversation SearchResultType = 1
	//全局（聊天消息）
	SearchResultType_SearchResultTypeMessageConversation SearchResultType = 2
	//群组内（聊天消息）
	SearchResultType_SearchResultTypeMessage SearchResultType = 3
	//图片
	SearchResultType_SearchResultTypePicture SearchResultType = 4
	//视频
	SearchResultType_SearchResultTypeVideo SearchResultType = 5
	//音频
	SearchResultType_SearchResultTypeAudio SearchResultType = 6
	//文档类型
	SearchResultType_SearchResultTypeDocument SearchResultType = 7
	//其它文件
	SearchResultType_SearchResultTypeFile SearchResultType = 8
)

// Enum value maps for SearchResultType.
var (
	SearchResultType_name = map[int32]string{
		0: "SearchResultTypeNone",
		1: "SearchResultTypeConversation",
		2: "SearchResultTypeMessageConversation",
		3: "SearchResultTypeMessage",
		4: "SearchResultTypePicture",
		5: "SearchResultTypeVideo",
		6: "SearchResultTypeAudio",
		7: "SearchResultTypeDocument",
		8: "SearchResultTypeFile",
	}
	SearchResultType_value = map[string]int32{
		"SearchResultTypeNone":                0,
		"SearchResultTypeConversation":        1,
		"SearchResultTypeMessageConversation": 2,
		"SearchResultTypeMessage":             3,
		"SearchResultTypePicture":             4,
		"SearchResultTypeVideo":               5,
		"SearchResultTypeAudio":               6,
		"SearchResultTypeDocument":            7,
		"SearchResultTypeFile":                8,
	}
)

func (x SearchResultType) Enum() *SearchResultType {
	p := new(SearchResultType)
	*p = x
	return p
}

func (x SearchResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_box_search_proto_enumTypes[0].Descriptor()
}

func (SearchResultType) Type() protoreflect.EnumType {
	return &file_box_search_proto_enumTypes[0]
}

func (x SearchResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchResultType.Descriptor instead.
func (SearchResultType) EnumDescriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{0}
}

type ConversationSearchRequest_Scope int32

const (
	//没有指定聊天内容，搜索出来的是空结果
	ConversationSearchRequest_ScopeNone ConversationSearchRequest_Scope = 0
	//根据名称搜索
	ConversationSearchRequest_ScopeName ConversationSearchRequest_Scope = 1
	//根据聊天内容搜索
	ConversationSearchRequest_ScopeMessage ConversationSearchRequest_Scope = 2
)

// Enum value maps for ConversationSearchRequest_Scope.
var (
	ConversationSearchRequest_Scope_name = map[int32]string{
		0: "ScopeNone",
		1: "ScopeName",
		2: "ScopeMessage",
	}
	ConversationSearchRequest_Scope_value = map[string]int32{
		"ScopeNone":    0,
		"ScopeName":    1,
		"ScopeMessage": 2,
	}
)

func (x ConversationSearchRequest_Scope) Enum() *ConversationSearchRequest_Scope {
	p := new(ConversationSearchRequest_Scope)
	*p = x
	return p
}

func (x ConversationSearchRequest_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationSearchRequest_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_box_search_proto_enumTypes[1].Descriptor()
}

func (ConversationSearchRequest_Scope) Type() protoreflect.EnumType {
	return &file_box_search_proto_enumTypes[1]
}

func (x ConversationSearchRequest_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationSearchRequest_Scope.Descriptor instead.
func (ConversationSearchRequest_Scope) EnumDescriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{14, 0}
}

type CommonFileSearchRequest_Scope int32

const (
	CommonFileSearchRequest_ScopeAll     CommonFileSearchRequest_Scope = 0
	CommonFileSearchRequest_ScopeMessage CommonFileSearchRequest_Scope = 1
	CommonFileSearchRequest_ScopeName    CommonFileSearchRequest_Scope = 2
	// 根据图片的标签搜索
	CommonFileSearchRequest_ScopeTag CommonFileSearchRequest_Scope = 3
)

// Enum value maps for CommonFileSearchRequest_Scope.
var (
	CommonFileSearchRequest_Scope_name = map[int32]string{
		0: "ScopeAll",
		1: "ScopeMessage",
		2: "ScopeName",
		3: "ScopeTag",
	}
	CommonFileSearchRequest_Scope_value = map[string]int32{
		"ScopeAll":     0,
		"ScopeMessage": 1,
		"ScopeName":    2,
		"ScopeTag":     3,
	}
)

func (x CommonFileSearchRequest_Scope) Enum() *CommonFileSearchRequest_Scope {
	p := new(CommonFileSearchRequest_Scope)
	*p = x
	return p
}

func (x CommonFileSearchRequest_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonFileSearchRequest_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_box_search_proto_enumTypes[2].Descriptor()
}

func (CommonFileSearchRequest_Scope) Type() protoreflect.EnumType {
	return &file_box_search_proto_enumTypes[2]
}

func (x CommonFileSearchRequest_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonFileSearchRequest_Scope.Descriptor instead.
func (CommonFileSearchRequest_Scope) EnumDescriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{20, 0}
}

type CommonFileSearchRequest_SortField int32

const (
	CommonFileSearchRequest_SortFieldNone CommonFileSearchRequest_SortField = 0
	CommonFileSearchRequest_SortFieldTime CommonFileSearchRequest_SortField = 1
)

// Enum value maps for CommonFileSearchRequest_SortField.
var (
	CommonFileSearchRequest_SortField_name = map[int32]string{
		0: "SortFieldNone",
		1: "SortFieldTime",
	}
	CommonFileSearchRequest_SortField_value = map[string]int32{
		"SortFieldNone": 0,
		"SortFieldTime": 1,
	}
)

func (x CommonFileSearchRequest_SortField) Enum() *CommonFileSearchRequest_SortField {
	p := new(CommonFileSearchRequest_SortField)
	*p = x
	return p
}

func (x CommonFileSearchRequest_SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonFileSearchRequest_SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_box_search_proto_enumTypes[3].Descriptor()
}

func (CommonFileSearchRequest_SortField) Type() protoreflect.EnumType {
	return &file_box_search_proto_enumTypes[3]
}

func (x CommonFileSearchRequest_SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonFileSearchRequest_SortField.Descriptor instead.
func (CommonFileSearchRequest_SortField) EnumDescriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{20, 1}
}

//===搜索列表项目定义===========
type CommonFileItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 文件URI，下载的依据
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// 文件创建的时间
	TimeAt int64 `protobuf:"varint,2,opt,name=time_at,json=timeAt,proto3" json:"time_at,omitempty"`
	// 文件的名字
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 来源群组网络ID
	SourceConversationId string `protobuf:"bytes,4,opt,name=source_conversation_id,json=sourceConversationId,proto3" json:"source_conversation_id,omitempty"`
	// 来源群组名称
	SourceConversationName string `protobuf:"bytes,5,opt,name=source_conversation_name,json=sourceConversationName,proto3" json:"source_conversation_name,omitempty"`
	// 大小
	ByteSize int64 `protobuf:"varint,6,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	// 命中内容高亮
	Highlight string `protobuf:"bytes,7,opt,name=highlight,proto3" json:"highlight,omitempty"`
	// 文件类型
	Category FileCategory `protobuf:"varint,8,opt,name=category,proto3,enum=etsme.ebox.file.FileCategory" json:"category,omitempty"`
	// 文件md5
	FileMd5 string `protobuf:"bytes,9,opt,name=file_md5,json=fileMd5,proto3" json:"file_md5,omitempty"`
	// 图片宽度
	Width int32 `protobuf:"varint,10,opt,name=width,proto3" json:"width,omitempty"`
	// 图片高度
	Height int32 `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	// 文件种子信息
	Sri string `protobuf:"bytes,12,opt,name=sri,proto3" json:"sri,omitempty"`
	// 图片对应的消息ID
	Mid string `protobuf:"bytes,13,opt,name=mid,proto3" json:"mid,omitempty"`
	// 命中的消息ID
	HitMid string `protobuf:"bytes,14,opt,name=hitMid,proto3" json:"hitMid,omitempty"`
	// 命中的消息内容
	HitText string `protobuf:"bytes,15,opt,name=hitText,proto3" json:"hitText,omitempty"`
	// 视频或音频消息播放时间，单位毫秒
	PlayMillisecond int64 `protobuf:"varint,16,opt,name=play_millisecond,json=playMillisecond,proto3" json:"play_millisecond,omitempty"`
	// 来源用户的网络ID
	FromNetworkId string `protobuf:"bytes,17,opt,name=from_network_id,json=fromNetworkId,proto3" json:"from_network_id,omitempty"`
	// 来源用户的盒子的nodeID
	FromNodeId string `protobuf:"bytes,18,opt,name=from_node_id,json=fromNodeId,proto3" json:"from_node_id,omitempty"`
	// 文件来源
	Source FileSource `protobuf:"varint,19,opt,name=source,proto3,enum=etsme.ebox.file.FileSource" json:"source,omitempty"`
}

func (x *CommonFileItem) Reset() {
	*x = CommonFileItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonFileItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonFileItem) ProtoMessage() {}

func (x *CommonFileItem) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonFileItem.ProtoReflect.Descriptor instead.
func (*CommonFileItem) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{0}
}

func (x *CommonFileItem) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CommonFileItem) GetTimeAt() int64 {
	if x != nil {
		return x.TimeAt
	}
	return 0
}

func (x *CommonFileItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommonFileItem) GetSourceConversationId() string {
	if x != nil {
		return x.SourceConversationId
	}
	return ""
}

func (x *CommonFileItem) GetSourceConversationName() string {
	if x != nil {
		return x.SourceConversationName
	}
	return ""
}

func (x *CommonFileItem) GetByteSize() int64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

func (x *CommonFileItem) GetHighlight() string {
	if x != nil {
		return x.Highlight
	}
	return ""
}

func (x *CommonFileItem) GetCategory() FileCategory {
	if x != nil {
		return x.Category
	}
	return FileCategory_All
}

func (x *CommonFileItem) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *CommonFileItem) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CommonFileItem) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CommonFileItem) GetSri() string {
	if x != nil {
		return x.Sri
	}
	return ""
}

func (x *CommonFileItem) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *CommonFileItem) GetHitMid() string {
	if x != nil {
		return x.HitMid
	}
	return ""
}

func (x *CommonFileItem) GetHitText() string {
	if x != nil {
		return x.HitText
	}
	return ""
}

func (x *CommonFileItem) GetPlayMillisecond() int64 {
	if x != nil {
		return x.PlayMillisecond
	}
	return 0
}

func (x *CommonFileItem) GetFromNetworkId() string {
	if x != nil {
		return x.FromNetworkId
	}
	return ""
}

func (x *CommonFileItem) GetFromNodeId() string {
	if x != nil {
		return x.FromNodeId
	}
	return ""
}

func (x *CommonFileItem) GetSource() FileSource {
	if x != nil {
		return x.Source
	}
	return FileSource_None
}

type ConversationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会话的名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 群成员数
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// 群ID
	ConversationId string `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 最早加入群聊的4个人，最多4个，在群里的昵称
	FirstFourMembers []string `protobuf:"bytes,4,rep,name=first_four_members,json=firstFourMembers,proto3" json:"first_four_members,omitempty"`
	// 命中消息数
	HitMessageCount int32 `protobuf:"varint,5,opt,name=hitMessageCount,proto3" json:"hitMessageCount,omitempty"`
	// 最早加入群聊的9个人
	FirstNineMembers []*ConversationMember `protobuf:"bytes,6,rep,name=first_nine_members,json=firstNineMembers,proto3" json:"first_nine_members,omitempty"`
}

func (x *ConversationItem) Reset() {
	*x = ConversationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationItem) ProtoMessage() {}

func (x *ConversationItem) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationItem.ProtoReflect.Descriptor instead.
func (*ConversationItem) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{1}
}

func (x *ConversationItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConversationItem) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ConversationItem) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationItem) GetFirstFourMembers() []string {
	if x != nil {
		return x.FirstFourMembers
	}
	return nil
}

func (x *ConversationItem) GetHitMessageCount() int32 {
	if x != nil {
		return x.HitMessageCount
	}
	return 0
}

func (x *ConversationItem) GetFirstNineMembers() []*ConversationMember {
	if x != nil {
		return x.FirstNineMembers
	}
	return nil
}

type MessageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//消息发送方ID
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	//消息发送方Nickname
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	//消息发送时间
	MsgAt int64 `protobuf:"varint,3,opt,name=msg_at,json=msgAt,proto3" json:"msg_at,omitempty"`
	//群ID
	ConversationId string `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	//消息文本内容
	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	//消息MID， 可以用来在会话窗口中定位消息
	Mid string `protobuf:"bytes,6,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (x *MessageItem) Reset() {
	*x = MessageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageItem) ProtoMessage() {}

func (x *MessageItem) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageItem.ProtoReflect.Descriptor instead.
func (*MessageItem) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{2}
}

func (x *MessageItem) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MessageItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MessageItem) GetMsgAt() int64 {
	if x != nil {
		return x.MsgAt
	}
	return 0
}

func (x *MessageItem) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MessageItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MessageItem) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

type ConversationSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 命中group总数
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 默认返回前3个命中的Group
	List []*ConversationItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Type SearchResultType    `protobuf:"varint,3,opt,name=type,proto3,enum=etsme.ebox.SearchResultType" json:"type,omitempty"`
}

func (x *ConversationSearchResult) Reset() {
	*x = ConversationSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSearchResult) ProtoMessage() {}

func (x *ConversationSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSearchResult.ProtoReflect.Descriptor instead.
func (*ConversationSearchResult) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{3}
}

func (x *ConversationSearchResult) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ConversationSearchResult) GetList() []*ConversationItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ConversationSearchResult) GetType() SearchResultType {
	if x != nil {
		return x.Type
	}
	return SearchResultType_SearchResultTypeNone
}

type MessageSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 默认返回前3个命中的聊天记录
	List []*MessageItem   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Type SearchResultType `protobuf:"varint,3,opt,name=type,proto3,enum=etsme.ebox.SearchResultType" json:"type,omitempty"`
}

func (x *MessageSearchResult) Reset() {
	*x = MessageSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSearchResult) ProtoMessage() {}

func (x *MessageSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSearchResult.ProtoReflect.Descriptor instead.
func (*MessageSearchResult) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{4}
}

func (x *MessageSearchResult) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MessageSearchResult) GetList() []*MessageItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MessageSearchResult) GetType() SearchResultType {
	if x != nil {
		return x.Type
	}
	return SearchResultType_SearchResultTypeNone
}

//图片文件搜索结果
type PictureSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 默认返回前3个命中的聊天记录
	List []*CommonFileItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Type SearchResultType  `protobuf:"varint,3,opt,name=type,proto3,enum=etsme.ebox.SearchResultType" json:"type,omitempty"`
}

func (x *PictureSearchResult) Reset() {
	*x = PictureSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PictureSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureSearchResult) ProtoMessage() {}

func (x *PictureSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureSearchResult.ProtoReflect.Descriptor instead.
func (*PictureSearchResult) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{5}
}

func (x *PictureSearchResult) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PictureSearchResult) GetList() []*CommonFileItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *PictureSearchResult) GetType() SearchResultType {
	if x != nil {
		return x.Type
	}
	return SearchResultType_SearchResultTypeNone
}

//视频文件搜索结果
type VideoSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 默认返回前3个命中的聊天记录
	List []*CommonFileItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Type SearchResultType  `protobuf:"varint,3,opt,name=type,proto3,enum=etsme.ebox.SearchResultType" json:"type,omitempty"`
}

func (x *VideoSearchResult) Reset() {
	*x = VideoSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSearchResult) ProtoMessage() {}

func (x *VideoSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSearchResult.ProtoReflect.Descriptor instead.
func (*VideoSearchResult) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{6}
}

func (x *VideoSearchResult) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VideoSearchResult) GetList() []*CommonFileItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *VideoSearchResult) GetType() SearchResultType {
	if x != nil {
		return x.Type
	}
	return SearchResultType_SearchResultTypeNone
}

//音频文件搜索结果
type AudioSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 默认返回前3个命中的聊天记录
	List []*CommonFileItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Type SearchResultType  `protobuf:"varint,3,opt,name=type,proto3,enum=etsme.ebox.SearchResultType" json:"type,omitempty"`
}

func (x *AudioSearchResult) Reset() {
	*x = AudioSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSearchResult) ProtoMessage() {}

func (x *AudioSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSearchResult.ProtoReflect.Descriptor instead.
func (*AudioSearchResult) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{7}
}

func (x *AudioSearchResult) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AudioSearchResult) GetList() []*CommonFileItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *AudioSearchResult) GetType() SearchResultType {
	if x != nil {
		return x.Type
	}
	return SearchResultType_SearchResultTypeNone
}

//文档文件搜索结果
type DocumentSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 默认返回前3个命中的聊天记录
	List []*CommonFileItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Type SearchResultType  `protobuf:"varint,3,opt,name=type,proto3,enum=etsme.ebox.SearchResultType" json:"type,omitempty"`
}

func (x *DocumentSearchResult) Reset() {
	*x = DocumentSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSearchResult) ProtoMessage() {}

func (x *DocumentSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSearchResult.ProtoReflect.Descriptor instead.
func (*DocumentSearchResult) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{8}
}

func (x *DocumentSearchResult) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DocumentSearchResult) GetList() []*CommonFileItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DocumentSearchResult) GetType() SearchResultType {
	if x != nil {
		return x.Type
	}
	return SearchResultType_SearchResultTypeNone
}

//其它文件搜索结果
type FileSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 默认返回前3个命中的聊天记录
	List []*CommonFileItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	Type SearchResultType  `protobuf:"varint,3,opt,name=type,proto3,enum=etsme.ebox.SearchResultType" json:"type,omitempty"`
}

func (x *FileSearchResult) Reset() {
	*x = FileSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSearchResult) ProtoMessage() {}

func (x *FileSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSearchResult.ProtoReflect.Descriptor instead.
func (*FileSearchResult) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{9}
}

func (x *FileSearchResult) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FileSearchResult) GetList() []*CommonFileItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FileSearchResult) GetType() SearchResultType {
	if x != nil {
		return x.Type
	}
	return SearchResultType_SearchResultTypeNone
}

//=============GlobalSearchResponseOp=============
//群内搜全局搜索索
type GlobalSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *GlobalSearchRequest) Reset() {
	*x = GlobalSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSearchRequest) ProtoMessage() {}

func (x *GlobalSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSearchRequest.ProtoReflect.Descriptor instead.
func (*GlobalSearchRequest) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{10}
}

func (x *GlobalSearchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

//全局搜索
type GlobalSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 群组搜索（根据群名称搜索） ,点击全部调用 ConversationSearchOP->ConversationSearchRequest(scope=Name)
	ConversationResult *ConversationSearchResult `protobuf:"bytes,1,opt,name=conversation_result,json=conversationResult,proto3" json:"conversation_result,omitempty"`
	// 群组搜索（根据聊天内容搜索）-> 对应交互上的聊天记录， 点击全部调用 ConversationSearchOP->ConversationSearchRequest(scope=Message)
	ConversationMessageResult *ConversationSearchResult `protobuf:"bytes,2,opt,name=conversation_message_result,json=conversationMessageResult,proto3" json:"conversation_message_result,omitempty"`
	// 图片结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=image)
	PictureResult *PictureSearchResult `protobuf:"bytes,3,opt,name=picture_result,json=pictureResult,proto3" json:"picture_result,omitempty"`
	// 视频结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=video)
	VideoResult *VideoSearchResult `protobuf:"bytes,4,opt,name=video_result,json=videoResult,proto3" json:"video_result,omitempty"`
	// 音频结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=audio)
	AudioResult *AudioSearchResult `protobuf:"bytes,5,opt,name=audio_result,json=audioResult,proto3" json:"audio_result,omitempty"`
	// 文档结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=file)
	DocumnetResult *DocumentSearchResult `protobuf:"bytes,6,opt,name=documnet_result,json=documnetResult,proto3" json:"documnet_result,omitempty"`
	// 其它文件结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=other)
	FileResult *FileSearchResult `protobuf:"bytes,7,opt,name=file_result,json=fileResult,proto3" json:"file_result,omitempty"`
}

func (x *GlobalSearchResponse) Reset() {
	*x = GlobalSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSearchResponse) ProtoMessage() {}

func (x *GlobalSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSearchResponse.ProtoReflect.Descriptor instead.
func (*GlobalSearchResponse) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{11}
}

func (x *GlobalSearchResponse) GetConversationResult() *ConversationSearchResult {
	if x != nil {
		return x.ConversationResult
	}
	return nil
}

func (x *GlobalSearchResponse) GetConversationMessageResult() *ConversationSearchResult {
	if x != nil {
		return x.ConversationMessageResult
	}
	return nil
}

func (x *GlobalSearchResponse) GetPictureResult() *PictureSearchResult {
	if x != nil {
		return x.PictureResult
	}
	return nil
}

func (x *GlobalSearchResponse) GetVideoResult() *VideoSearchResult {
	if x != nil {
		return x.VideoResult
	}
	return nil
}

func (x *GlobalSearchResponse) GetAudioResult() *AudioSearchResult {
	if x != nil {
		return x.AudioResult
	}
	return nil
}

func (x *GlobalSearchResponse) GetDocumnetResult() *DocumentSearchResult {
	if x != nil {
		return x.DocumnetResult
	}
	return nil
}

func (x *GlobalSearchResponse) GetFileResult() *FileSearchResult {
	if x != nil {
		return x.FileResult
	}
	return nil
}

//=============ConversationRelatedSearchPO=============
//群内搜索
type ConversationRelatedSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword        string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (x *ConversationRelatedSearchRequest) Reset() {
	*x = ConversationRelatedSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationRelatedSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationRelatedSearchRequest) ProtoMessage() {}

func (x *ConversationRelatedSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationRelatedSearchRequest.ProtoReflect.Descriptor instead.
func (*ConversationRelatedSearchRequest) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{12}
}

func (x *ConversationRelatedSearchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ConversationRelatedSearchRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

type ConversationRelatedSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// // 群组搜索,点击全部调用 ConversationSearchOP->ConversationSearchRequest(scope=Name)
	// ConversationSearchResult Conversation_result = 1;
	// 消息搜索,点击全部调用 MessageSearchOP->MessageSearchRequest(scope=Name)
	MessageResult *MessageSearchResult `protobuf:"bytes,1,opt,name=message_result,json=messageResult,proto3" json:"message_result,omitempty"`
	// 图片结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=image)
	PictureResult *PictureSearchResult `protobuf:"bytes,2,opt,name=picture_result,json=pictureResult,proto3" json:"picture_result,omitempty"`
	// 视频结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=video)
	VideoResult *VideoSearchResult `protobuf:"bytes,3,opt,name=video_result,json=videoResult,proto3" json:"video_result,omitempty"`
	// 音频结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=audio)
	AudioResult *AudioSearchResult `protobuf:"bytes,4,opt,name=audio_result,json=audioResult,proto3" json:"audio_result,omitempty"`
	// 文档结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=file)
	DocumnetResult *DocumentSearchResult `protobuf:"bytes,5,opt,name=documnet_result,json=documnetResult,proto3" json:"documnet_result,omitempty"`
	// 其它文件结果,点击全部调用 CommonFileSearchOP->CommonFileSearchRequest(scope=All,category=other)
	FileResult *FileSearchResult `protobuf:"bytes,6,opt,name=file_result,json=fileResult,proto3" json:"file_result,omitempty"`
}

func (x *ConversationRelatedSearchResponse) Reset() {
	*x = ConversationRelatedSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationRelatedSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationRelatedSearchResponse) ProtoMessage() {}

func (x *ConversationRelatedSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationRelatedSearchResponse.ProtoReflect.Descriptor instead.
func (*ConversationRelatedSearchResponse) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{13}
}

func (x *ConversationRelatedSearchResponse) GetMessageResult() *MessageSearchResult {
	if x != nil {
		return x.MessageResult
	}
	return nil
}

func (x *ConversationRelatedSearchResponse) GetPictureResult() *PictureSearchResult {
	if x != nil {
		return x.PictureResult
	}
	return nil
}

func (x *ConversationRelatedSearchResponse) GetVideoResult() *VideoSearchResult {
	if x != nil {
		return x.VideoResult
	}
	return nil
}

func (x *ConversationRelatedSearchResponse) GetAudioResult() *AudioSearchResult {
	if x != nil {
		return x.AudioResult
	}
	return nil
}

func (x *ConversationRelatedSearchResponse) GetDocumnetResult() *DocumentSearchResult {
	if x != nil {
		return x.DocumnetResult
	}
	return nil
}

func (x *ConversationRelatedSearchResponse) GetFileResult() *FileSearchResult {
	if x != nil {
		return x.FileResult
	}
	return nil
}

//=============ConversationSearchPO=============
//单独搜索群
type ConversationSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 关键词
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 第n页数
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// 要搜索的群内容
	Scope ConversationSearchRequest_Scope `protobuf:"varint,4,opt,name=scope,proto3,enum=etsme.ebox.ConversationSearchRequest_Scope" json:"scope,omitempty"`
}

func (x *ConversationSearchRequest) Reset() {
	*x = ConversationSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSearchRequest) ProtoMessage() {}

func (x *ConversationSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSearchRequest.ProtoReflect.Descriptor instead.
func (*ConversationSearchRequest) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{14}
}

func (x *ConversationSearchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ConversationSearchRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ConversationSearchRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ConversationSearchRequest) GetScope() ConversationSearchRequest_Scope {
	if x != nil {
		return x.Scope
	}
	return ConversationSearchRequest_ScopeNone
}

type ConversationSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// 群组列表
	List []*ConversationItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ConversationSearchResponse) Reset() {
	*x = ConversationSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSearchResponse) ProtoMessage() {}

func (x *ConversationSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSearchResponse.ProtoReflect.Descriptor instead.
func (*ConversationSearchResponse) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{15}
}

func (x *ConversationSearchResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ConversationSearchResponse) GetList() []*ConversationItem {
	if x != nil {
		return x.List
	}
	return nil
}

//=============MessageSearchPO=============
//搜索聊天记录
type MessageSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 关键词
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 第n页数
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// 群组ID，必填
	ConversationId string `protobuf:"bytes,4,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 成员ID
	Uid int64 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *MessageSearchRequest) Reset() {
	*x = MessageSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSearchRequest) ProtoMessage() {}

func (x *MessageSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSearchRequest.ProtoReflect.Descriptor instead.
func (*MessageSearchRequest) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{16}
}

func (x *MessageSearchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *MessageSearchRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MessageSearchRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MessageSearchRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MessageSearchRequest) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type MessageSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页信息
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// 消息列表
	List []*MessageItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MessageSearchResponse) Reset() {
	*x = MessageSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSearchResponse) ProtoMessage() {}

func (x *MessageSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSearchResponse.ProtoReflect.Descriptor instead.
func (*MessageSearchResponse) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{17}
}

func (x *MessageSearchResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *MessageSearchResponse) GetList() []*MessageItem {
	if x != nil {
		return x.List
	}
	return nil
}

//=============ConversationCalendarSearchPO=============
//群日历搜索，列出群的日志列表,范围为闭区间[start_day，end_day]
type ConversationCalendarSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	//开始时间，当天00:00开始 ，如2020-01-01 时间为 2020-01-01 00:00，闭区间
	StartDay *timestamp.Timestamp `protobuf:"bytes,6,opt,name=start_day,json=startDay,proto3" json:"start_day,omitempty"` // 拍照时间
	//结束时间当天00:00开始 ，如2020-01-02 时间为 2020-01-02 00:00，闭区间
	EndDay *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_day,json=endDay,proto3" json:"end_day,omitempty"`
}

func (x *ConversationCalendarSearchRequest) Reset() {
	*x = ConversationCalendarSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCalendarSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCalendarSearchRequest) ProtoMessage() {}

func (x *ConversationCalendarSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCalendarSearchRequest.ProtoReflect.Descriptor instead.
func (*ConversationCalendarSearchRequest) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{18}
}

func (x *ConversationCalendarSearchRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ConversationCalendarSearchRequest) GetStartDay() *timestamp.Timestamp {
	if x != nil {
		return x.StartDay
	}
	return nil
}

func (x *ConversationCalendarSearchRequest) GetEndDay() *timestamp.Timestamp {
	if x != nil {
		return x.EndDay
	}
	return nil
}

type ConversationCalendarSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//日期列表
	Day []*ConversationCalendarSearchResponse_Day `protobuf:"bytes,1,rep,name=day,proto3" json:"day,omitempty"`
}

func (x *ConversationCalendarSearchResponse) Reset() {
	*x = ConversationCalendarSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCalendarSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCalendarSearchResponse) ProtoMessage() {}

func (x *ConversationCalendarSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCalendarSearchResponse.ProtoReflect.Descriptor instead.
func (*ConversationCalendarSearchResponse) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{19}
}

func (x *ConversationCalendarSearchResponse) GetDay() []*ConversationCalendarSearchResponse_Day {
	if x != nil {
		return x.Day
	}
	return nil
}

//=============CommonFileSearchPO=============
// 图片，视频，音频，文件，其他文件，搜索都是用这个请求
type CommonFileSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 关键词
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	// 第n页数
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// 排序字段
	SortBy CommonFileSearchRequest_SortField `protobuf:"varint,4,opt,name=sort_by,json=sortBy,proto3,enum=etsme.ebox.CommonFileSearchRequest_SortField" json:"sort_by,omitempty"`
	// 顺序
	Order Order `protobuf:"varint,5,opt,name=order,proto3,enum=etsme.ebox.Order" json:"order,omitempty"`
	// 限定群组搜索
	ConversationId string `protobuf:"bytes,6,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// 限定文件类型搜索
	Category FileCategory `protobuf:"varint,7,opt,name=category,proto3,enum=etsme.ebox.file.FileCategory" json:"category,omitempty"`
	// 文件内容搜索范围
	Scope CommonFileSearchRequest_Scope `protobuf:"varint,8,opt,name=scope,proto3,enum=etsme.ebox.CommonFileSearchRequest_Scope" json:"scope,omitempty"`
	//
	Source FileSource `protobuf:"varint,9,opt,name=source,proto3,enum=etsme.ebox.file.FileSource" json:"source,omitempty"`
}

func (x *CommonFileSearchRequest) Reset() {
	*x = CommonFileSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonFileSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonFileSearchRequest) ProtoMessage() {}

func (x *CommonFileSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonFileSearchRequest.ProtoReflect.Descriptor instead.
func (*CommonFileSearchRequest) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{20}
}

func (x *CommonFileSearchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *CommonFileSearchRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CommonFileSearchRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CommonFileSearchRequest) GetSortBy() CommonFileSearchRequest_SortField {
	if x != nil {
		return x.SortBy
	}
	return CommonFileSearchRequest_SortFieldNone
}

func (x *CommonFileSearchRequest) GetOrder() Order {
	if x != nil {
		return x.Order
	}
	return Order_Desc
}

func (x *CommonFileSearchRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *CommonFileSearchRequest) GetCategory() FileCategory {
	if x != nil {
		return x.Category
	}
	return FileCategory_All
}

func (x *CommonFileSearchRequest) GetScope() CommonFileSearchRequest_Scope {
	if x != nil {
		return x.Scope
	}
	return CommonFileSearchRequest_ScopeAll
}

func (x *CommonFileSearchRequest) GetSource() FileSource {
	if x != nil {
		return x.Source
	}
	return FileSource_None
}

type CommonFileSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination       `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	List       []*CommonFileItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CommonFileSearchResponse) Reset() {
	*x = CommonFileSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonFileSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonFileSearchResponse) ProtoMessage() {}

func (x *CommonFileSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonFileSearchResponse.ProtoReflect.Descriptor instead.
func (*CommonFileSearchResponse) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{21}
}

func (x *CommonFileSearchResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *CommonFileSearchResponse) GetList() []*CommonFileItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ConversationCalendarSearchResponse_Day struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//日期的开始时间的时间戳，当天00:00开始 ，如2020-01-01 时间为 2020-01-01 00:00
	Data *timestamp.Timestamp `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	//该日期第一条消息的ID
	Mid string `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (x *ConversationCalendarSearchResponse_Day) Reset() {
	*x = ConversationCalendarSearchResponse_Day{}
	if protoimpl.UnsafeEnabled {
		mi := &file_box_search_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationCalendarSearchResponse_Day) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationCalendarSearchResponse_Day) ProtoMessage() {}

func (x *ConversationCalendarSearchResponse_Day) ProtoReflect() protoreflect.Message {
	mi := &file_box_search_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationCalendarSearchResponse_Day.ProtoReflect.Descriptor instead.
func (*ConversationCalendarSearchResponse_Day) Descriptor() ([]byte, []int) {
	return file_box_search_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ConversationCalendarSearchResponse_Day) GetData() *timestamp.Timestamp {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConversationCalendarSearchResponse_Day) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

var File_box_search_proto protoreflect.FileDescriptor

var file_box_search_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x6f, 0x78, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x62, 0x6f, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x62, 0x6f, 0x78, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x78, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x04, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x62, 0x79, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65,
	0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72,
	0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x69, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x69, 0x74, 0x4d, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x69, 0x74, 0x4d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x68, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65,
	0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x69, 0x6e,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x41, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x22, 0x94, 0x01, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65,
	0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x13, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65,
	0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x8b, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x74, 0x73,
	0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x73,
	0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8b,
	0x01, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65,
	0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65,
	0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x74, 0x73, 0x6d,
	0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x73, 0x6d,
	0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01,
	0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65,
	0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65,
	0x62, 0x6f, 0x78, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x13, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa9, 0x04, 0x0a, 0x14,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x64, 0x0a, 0x1b, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x74, 0x73, 0x6d,
	0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a,
	0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65,
	0x62, 0x6f, 0x78, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x6e,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc1,
	0x03, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x0e,
	0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x74, 0x73,
	0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65,
	0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x02, 0x22, 0x86,
	0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x7c, 0x0a,
	0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x74, 0x73,
	0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x21,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x06, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65,
	0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x79,
	0x52, 0x03, 0x64, 0x61, 0x79, 0x1a, 0x47, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x22, 0x9f,
	0x04, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65,
	0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x61, 0x67, 0x10, 0x03, 0x22, 0x31, 0x0a,
	0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x01,
	0x22, 0x82, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x74, 0x73, 0x6d, 0x65, 0x2e, 0x65, 0x62, 0x6f, 0x78,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x2a, 0x9f, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x06, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x08, 0x42, 0x60, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x74, 0x73, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x6f,
	0x78, 0x42, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x2c, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x65, 0x74, 0x73, 0x75, 0x73, 0x2e, 0x6e,
	0x65, 0x74, 0x2f, 0x65, 0x62, 0x6f, 0x78, 0x2f, 0x65, 0x62, 0x6f, 0x78, 0x2d, 0x67, 0x6f, 0x6c,
	0x61, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x62, 0x6f, 0x78, 0x70, 0x62, 0xf8, 0x01,
	0x01, 0xa2, 0x02, 0x05, 0x45, 0x50, 0x42, 0x6f, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_box_search_proto_rawDescOnce sync.Once
	file_box_search_proto_rawDescData = file_box_search_proto_rawDesc
)

func file_box_search_proto_rawDescGZIP() []byte {
	file_box_search_proto_rawDescOnce.Do(func() {
		file_box_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_box_search_proto_rawDescData)
	})
	return file_box_search_proto_rawDescData
}

var file_box_search_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_box_search_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_box_search_proto_goTypes = []interface{}{
	(SearchResultType)(0),                          // 0: etsme.ebox.SearchResultType
	(ConversationSearchRequest_Scope)(0),           // 1: etsme.ebox.ConversationSearchRequest.Scope
	(CommonFileSearchRequest_Scope)(0),             // 2: etsme.ebox.CommonFileSearchRequest.Scope
	(CommonFileSearchRequest_SortField)(0),         // 3: etsme.ebox.CommonFileSearchRequest.SortField
	(*CommonFileItem)(nil),                         // 4: etsme.ebox.CommonFileItem
	(*ConversationItem)(nil),                       // 5: etsme.ebox.ConversationItem
	(*MessageItem)(nil),                            // 6: etsme.ebox.MessageItem
	(*ConversationSearchResult)(nil),               // 7: etsme.ebox.ConversationSearchResult
	(*MessageSearchResult)(nil),                    // 8: etsme.ebox.MessageSearchResult
	(*PictureSearchResult)(nil),                    // 9: etsme.ebox.PictureSearchResult
	(*VideoSearchResult)(nil),                      // 10: etsme.ebox.VideoSearchResult
	(*AudioSearchResult)(nil),                      // 11: etsme.ebox.AudioSearchResult
	(*DocumentSearchResult)(nil),                   // 12: etsme.ebox.DocumentSearchResult
	(*FileSearchResult)(nil),                       // 13: etsme.ebox.FileSearchResult
	(*GlobalSearchRequest)(nil),                    // 14: etsme.ebox.GlobalSearchRequest
	(*GlobalSearchResponse)(nil),                   // 15: etsme.ebox.GlobalSearchResponse
	(*ConversationRelatedSearchRequest)(nil),       // 16: etsme.ebox.ConversationRelatedSearchRequest
	(*ConversationRelatedSearchResponse)(nil),      // 17: etsme.ebox.ConversationRelatedSearchResponse
	(*ConversationSearchRequest)(nil),              // 18: etsme.ebox.ConversationSearchRequest
	(*ConversationSearchResponse)(nil),             // 19: etsme.ebox.ConversationSearchResponse
	(*MessageSearchRequest)(nil),                   // 20: etsme.ebox.MessageSearchRequest
	(*MessageSearchResponse)(nil),                  // 21: etsme.ebox.MessageSearchResponse
	(*ConversationCalendarSearchRequest)(nil),      // 22: etsme.ebox.ConversationCalendarSearchRequest
	(*ConversationCalendarSearchResponse)(nil),     // 23: etsme.ebox.ConversationCalendarSearchResponse
	(*CommonFileSearchRequest)(nil),                // 24: etsme.ebox.CommonFileSearchRequest
	(*CommonFileSearchResponse)(nil),               // 25: etsme.ebox.CommonFileSearchResponse
	(*ConversationCalendarSearchResponse_Day)(nil), // 26: etsme.ebox.ConversationCalendarSearchResponse.Day
	(FileCategory)(0),                              // 27: etsme.ebox.file.FileCategory
	(FileSource)(0),                                // 28: etsme.ebox.file.FileSource
	(*ConversationMember)(nil),                     // 29: etsme.ebox.ConversationMember
	(*Pagination)(nil),                             // 30: etsme.ebox.Pagination
	(*timestamp.Timestamp)(nil),                    // 31: google.protobuf.Timestamp
	(Order)(0),                                     // 32: etsme.ebox.Order
}
var file_box_search_proto_depIdxs = []int32{
	27, // 0: etsme.ebox.CommonFileItem.category:type_name -> etsme.ebox.file.FileCategory
	28, // 1: etsme.ebox.CommonFileItem.source:type_name -> etsme.ebox.file.FileSource
	29, // 2: etsme.ebox.ConversationItem.first_nine_members:type_name -> etsme.ebox.ConversationMember
	5,  // 3: etsme.ebox.ConversationSearchResult.list:type_name -> etsme.ebox.ConversationItem
	0,  // 4: etsme.ebox.ConversationSearchResult.type:type_name -> etsme.ebox.SearchResultType
	6,  // 5: etsme.ebox.MessageSearchResult.list:type_name -> etsme.ebox.MessageItem
	0,  // 6: etsme.ebox.MessageSearchResult.type:type_name -> etsme.ebox.SearchResultType
	4,  // 7: etsme.ebox.PictureSearchResult.list:type_name -> etsme.ebox.CommonFileItem
	0,  // 8: etsme.ebox.PictureSearchResult.type:type_name -> etsme.ebox.SearchResultType
	4,  // 9: etsme.ebox.VideoSearchResult.list:type_name -> etsme.ebox.CommonFileItem
	0,  // 10: etsme.ebox.VideoSearchResult.type:type_name -> etsme.ebox.SearchResultType
	4,  // 11: etsme.ebox.AudioSearchResult.list:type_name -> etsme.ebox.CommonFileItem
	0,  // 12: etsme.ebox.AudioSearchResult.type:type_name -> etsme.ebox.SearchResultType
	4,  // 13: etsme.ebox.DocumentSearchResult.list:type_name -> etsme.ebox.CommonFileItem
	0,  // 14: etsme.ebox.DocumentSearchResult.type:type_name -> etsme.ebox.SearchResultType
	4,  // 15: etsme.ebox.FileSearchResult.list:type_name -> etsme.ebox.CommonFileItem
	0,  // 16: etsme.ebox.FileSearchResult.type:type_name -> etsme.ebox.SearchResultType
	7,  // 17: etsme.ebox.GlobalSearchResponse.conversation_result:type_name -> etsme.ebox.ConversationSearchResult
	7,  // 18: etsme.ebox.GlobalSearchResponse.conversation_message_result:type_name -> etsme.ebox.ConversationSearchResult
	9,  // 19: etsme.ebox.GlobalSearchResponse.picture_result:type_name -> etsme.ebox.PictureSearchResult
	10, // 20: etsme.ebox.GlobalSearchResponse.video_result:type_name -> etsme.ebox.VideoSearchResult
	11, // 21: etsme.ebox.GlobalSearchResponse.audio_result:type_name -> etsme.ebox.AudioSearchResult
	12, // 22: etsme.ebox.GlobalSearchResponse.documnet_result:type_name -> etsme.ebox.DocumentSearchResult
	13, // 23: etsme.ebox.GlobalSearchResponse.file_result:type_name -> etsme.ebox.FileSearchResult
	8,  // 24: etsme.ebox.ConversationRelatedSearchResponse.message_result:type_name -> etsme.ebox.MessageSearchResult
	9,  // 25: etsme.ebox.ConversationRelatedSearchResponse.picture_result:type_name -> etsme.ebox.PictureSearchResult
	10, // 26: etsme.ebox.ConversationRelatedSearchResponse.video_result:type_name -> etsme.ebox.VideoSearchResult
	11, // 27: etsme.ebox.ConversationRelatedSearchResponse.audio_result:type_name -> etsme.ebox.AudioSearchResult
	12, // 28: etsme.ebox.ConversationRelatedSearchResponse.documnet_result:type_name -> etsme.ebox.DocumentSearchResult
	13, // 29: etsme.ebox.ConversationRelatedSearchResponse.file_result:type_name -> etsme.ebox.FileSearchResult
	1,  // 30: etsme.ebox.ConversationSearchRequest.scope:type_name -> etsme.ebox.ConversationSearchRequest.Scope
	30, // 31: etsme.ebox.ConversationSearchResponse.pagination:type_name -> etsme.ebox.Pagination
	5,  // 32: etsme.ebox.ConversationSearchResponse.list:type_name -> etsme.ebox.ConversationItem
	30, // 33: etsme.ebox.MessageSearchResponse.pagination:type_name -> etsme.ebox.Pagination
	6,  // 34: etsme.ebox.MessageSearchResponse.list:type_name -> etsme.ebox.MessageItem
	31, // 35: etsme.ebox.ConversationCalendarSearchRequest.start_day:type_name -> google.protobuf.Timestamp
	31, // 36: etsme.ebox.ConversationCalendarSearchRequest.end_day:type_name -> google.protobuf.Timestamp
	26, // 37: etsme.ebox.ConversationCalendarSearchResponse.day:type_name -> etsme.ebox.ConversationCalendarSearchResponse.Day
	3,  // 38: etsme.ebox.CommonFileSearchRequest.sort_by:type_name -> etsme.ebox.CommonFileSearchRequest.SortField
	32, // 39: etsme.ebox.CommonFileSearchRequest.order:type_name -> etsme.ebox.Order
	27, // 40: etsme.ebox.CommonFileSearchRequest.category:type_name -> etsme.ebox.file.FileCategory
	2,  // 41: etsme.ebox.CommonFileSearchRequest.scope:type_name -> etsme.ebox.CommonFileSearchRequest.Scope
	28, // 42: etsme.ebox.CommonFileSearchRequest.source:type_name -> etsme.ebox.file.FileSource
	30, // 43: etsme.ebox.CommonFileSearchResponse.pagination:type_name -> etsme.ebox.Pagination
	4,  // 44: etsme.ebox.CommonFileSearchResponse.list:type_name -> etsme.ebox.CommonFileItem
	31, // 45: etsme.ebox.ConversationCalendarSearchResponse.Day.data:type_name -> google.protobuf.Timestamp
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_box_search_proto_init() }
func file_box_search_proto_init() {
	if File_box_search_proto != nil {
		return
	}
	file_box_common_proto_init()
	file_box_file_proto_init()
	file_box_conversation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_box_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonFileItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PictureSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationRelatedSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationRelatedSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationCalendarSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationCalendarSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonFileSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonFileSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_box_search_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationCalendarSearchResponse_Day); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_box_search_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_box_search_proto_goTypes,
		DependencyIndexes: file_box_search_proto_depIdxs,
		EnumInfos:         file_box_search_proto_enumTypes,
		MessageInfos:      file_box_search_proto_msgTypes,
	}.Build()
	File_box_search_proto = out.File
	file_box_search_proto_rawDesc = nil
	file_box_search_proto_goTypes = nil
	file_box_search_proto_depIdxs = nil
}
